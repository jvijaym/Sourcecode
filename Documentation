JAVA SOLUTION TO THE  Robot PROBLEM
=======================================

The accompanying code and programs are a solution to the  Robot problem
described below.

THE CODE
--------
The code is contained in single file called Robot.java and is described in that file's
comments. Its key elements are

a Robot location/direction state,
transforms on that state, and
mappings from the specified input/output formats to those states and transforms.

There are no JUnit tests since the code in its current form is completely exercised
from the command line and I currently have no intention to re-use any of the code.


NOTE ON PROBLEM STATEMENT
-------------------------

The problem is under-specified in that it does not describe what do if a Robot
hits the boundary or another Robot. There are several ways to handle this. I
chose to stop the Robot and report its position. I thought that would be the easiest
behaviour for the Robot controllers in NASA to deal with since it leaves them
with a Robot in a known position.

The problem statement did not raise the possibilty of malformed input so I did
not handle this.


PROBLEM
-------
A squad of robotic Robots are to be landed by NASA on a plateau on .
This plateau, which is curiously rectangular, must be navigated by the
Robots so that their on-board cameras can get a complete view of the
surrounding terrain to send back to Earth.

A Robot's position and location is represented by a combination of x and y
co-ordinates and a letter representing one of the four cardinal compass
points. The plateau is divided up into a grid to simplify navigation. An
example position might be 0, 0, N, which means the Robot is in the bottom
left corner and facing North.

In order to control a Robot, NASA sends a simple string of letters. The
possible letters are 'L', 'R' and 'M'. 'L' and 'R' makes the Robot spin 90
degrees left or right respectively, without moving from its current spot.
'M' means move forward one grid point, and maintain the same heading.

Assume that the square directly North from (x, y) is (x, y+1).

INPUT:
The first line of input is the upper-right coordinates of the plateau, the
lower-left coordinates are assumed to be 0,0.

The rest of the input is information pertaining to the Robots that have
been deployed. Each Robot has two lines of input. The first line gives the
Robot's position, and the second line is a series of instructions telling
the Robot how to explore the plateau.

The position is made up of two integers and a letter separated by spaces,
corresponding to the x and y co-ordinates and the Robot's orientation.

Each Robot will be finished sequentially, which means that the second Robot
won't start to move until the first one has finished moving.


OUTPUT
The output for each Robot should be its final co-ordinates and heading.

INPUT AND OUTPUT

Test Input:
5 5
1 2 N
LMLMLMLMM
3 3 E
MMRMMRMRRM

Expected Output:
1 3 N
5 1 E
